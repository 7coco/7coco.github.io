<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>7coco Tech Blog</title>
    <link>https://7coco.github.io/</link>
    <description>Recent content on 7coco Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Sun, 23 Apr 2017 13:35:19 +0900</lastBuildDate>
    
	<atom:link href="https://7coco.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Contact</title>
      <link>https://7coco.github.io/contact/</link>
      <pubDate>Sun, 23 Apr 2017 13:35:19 +0900</pubDate>
      
      <guid>https://7coco.github.io/contact/</guid>
      <description> 7coco に連絡を取りたいとき マネーフォワードの社員である 7coco さんに連絡を取りたい場合 基本的には下記メールアドレスまでどうぞ。
kawano.koko@moneyforward.co.jp
何か事情がある場合は下の方のSNSから連絡していただいても OK です！
音楽バンドを組むお誘いをしたい場合 or 1エンジニアである 7coco さんと連絡を取りたい場合 基本的には下記メールアドレスまでどうぞ。
coco.greenery@gmail.com
何か事情がある場合は下の方のSNSから連絡していただいても OK です！
連絡じゃなくてなんかもうちょっと 7coco さんが知りたい場合 下記を覗いてみるといいかも？
 GitHub Twitter Qiita Facebook Wantedly  </description>
    </item>
    
    <item>
      <title>このブログを書いている人について</title>
      <link>https://7coco.github.io/about/</link>
      <pubDate>Sat, 22 Apr 2017 13:38:18 +0900</pubDate>
      
      <guid>https://7coco.github.io/about/</guid>
      <description>About me 誰？ 名前：7coco (ナナココ、もしくはセブンココ、もしくは単にココ)
生年月日：1998年6月20日 (18歳)
職業：Webエンジニア
所属：株式会社マネーフォワード 開発推進本部
twitter：@7__coco, GitHub：@7coco
経歴 学芸大附属 =&amp;gt; 早稲田実業 =&amp;gt; N高等学校 =&amp;gt; マネーフォワードに就職 どんなエンジニア？ プログラミング始めて1年です。
JavaScript(Node.js), Ruby(Ruby on Rails)を書いてきて、就職して Java を始めました。
会社では Java を用いたアカウントアグリゲーションや Rails を使ったサーバーサイドプログラミングをしています。
趣味 水泳 0歳から水泳を始めて、9歳の頃に高井戸SCの選手として選手登録、10歳でイトマンへ。以後イトマンの選手として活動していました。
受験勉強や入院を経て17歳で選手を引退しましたが、今でも泳ぐことは大好きです。
音楽 小さい頃ピアノを習っていて、すぐにやめましたが今でも趣味でよく弾きます。
高校時代にはキーボーディストとしてバンドも組んでいました。
弾くだけでなく聴くのも大好きで、特に fusion が好きです。中でもT-SQUAREが神だと思っています。
最近もう一度バンドを組みたいと思っているのでもし「一緒に組もうよ！」という方がいらっしゃればぜひ Contact からお声掛けください。
Bot作り 思いっきりどう見ても機械なんだけどちょっと生き物っぽいものが大好きで、暇な時は自分で bot を作って愛でています。
FAQ 1. どうしてプログラミング始めたの？ なんか記事書く
2. なんで大学行かなかったの？ なんか記事書くかも
3. N高等学校って何？ ざっくり言うと、角川ドワンゴが作った2016年にはじめったネットの高校です。きちんと国の認可を受けた通信制高校で、一般的な高校と同じ高校卒業資格の取得が可能です。
年に数日のスクーリングを除いて授業はすべてネット上で行われるため、一般的な高校と比べて圧倒的に自由な時間が得られるのがいいところ。学費も安い。
詳しくはこちら 。
4. バンタンプログラマーズハイレベルハイスクールって何？ 普通の高校生に比べて時間があるN高等学校の生徒は、N高等学校が提携している様々な学校に通う権利があります。
提携学校には、パティシエや調理師、小説家を目指したり、東大生を目指したりする学校など、様々な専門的な学習ができる学校があります。
その中に1年間で即戦力のエンジニアを育てる学校があって、そればバンタンプログラマーズハイレベルハイスクールです。
詳しくはこちら</description>
    </item>
    
    <item>
      <title>git commit --fixup</title>
      <link>https://7coco.github.io/post/git_fixup/</link>
      <pubDate>Fri, 14 Apr 2017 14:56:16 +0900</pubDate>
      
      <guid>https://7coco.github.io/post/git_fixup/</guid>
      <description>本日のTIL ぶつかったこと 仕事でコードを書いてレビューをお願いしたら、上司から二つ前のコミットを変えるように言われました。 「--fixup を使うといいよ！」と言われたのですが、そのオプションを知らなかったのでググってみました。
解決法 普通にコミットするときに既存のコミットを下のように指定します。
git commit --fixup HEAD~1  こうすると指定されたコミットメッセージの先頭に &amp;ldquo;fixup! &amp;rdquo; がついたコミットになります。
そして、この状態で --autosquash というオプションをつけて rebase -i します。
git rebase -i --autosquash HEAD~2  すると、エディタが開きますが、とりあえず何も考えず内容を保存して終了してみましょう ( エディタが開いた段階で指定したコミットと&amp;rdquo;fixup!&amp;rdquo; がついたコミットがまとめられるようになっています )。 これで、 &amp;ldquo;fixup!&amp;rdquo; のついたコミットと指定したコミットが一つにまとまります ( コミットメッセージには &amp;ldquo;fixup!&amp;rdquo; はつきません ) 。
ちなみに、 --autosquash というのは長いですね。いちいちオプションをつけるのは面倒です。 エイリアスを設定してもいいのですが、下記のように設定するといつでも rebase をするときに --autosquash をつけたのと同じことになります。--autosquash オプションをつけて頻繁に rebase する場合はぜひ下記のコマンドを叩きましょう。
git config --global rebase.autosquash true  まとめ 便利なオプションがあったんだなあ。というお気持ちです。はい。</description>
    </item>
    
    <item>
      <title>Mac で CSV を編集するときの個人的イチオシツール</title>
      <link>https://7coco.github.io/post/edit_csv/</link>
      <pubDate>Tue, 11 Apr 2017 14:53:56 +0900</pubDate>
      
      <guid>https://7coco.github.io/post/edit_csv/</guid>
      <description>本日のTIL ぶつかったこと 新規アグリコードを書いていたら、CSVを編集しなければならなくなり、Mac で CSV をいい感じに編集できるものを探すことになりました。 一応、前提として私は以下のような状況でした。 - excel は持ってない。高い。 - Numbers で編集すると拡張子が .numbers になったものを編集してることになってややこしいし、なぜか Numbers で開くと空白とか書式が勝手に Numbers 的によしなにされてしまうらしく、余計な差分が出まくる。 - 普段 atom を使っている ( やっぱり atom が一番だよね！ )
解決法 結論 tablr というパッケージを atom にインストール 自分なりに解説 解説というか、一応使い方みたいなところを書いておきます。
インストール apm install tablr  使い方 tablr がインストールされた状態で csv ファイルを開くと下のような画面が出てきます。
「Open Table Editor」で表になった状態で編集できる画面が、「Open Text Editor」で通常のテキストベースでの編集ができます。
OpenTableEditor OpenTableEditor を選択するとこんな感じに表示されます。 セルの編集はもちろん複数選択やコピペなどができて、普通の表を編集する時に求めるような機能はだいたいあると思います。 一応 こちら がチートシートになっているので、あの機能はどうやったら使えるんだ？という時には覗くときっと見つかると思います。 基本的な編集は直感的に行えますので、あまり複雑なことをしなければ導入にあたっては苦労しない気がします。
まとめ やはり普段使っているエディタを使うのが慣れるのも早く、導入もスムーズでいいですね。 atom は新しい言語のシンタックスハイライトやリンターなどに代表されるように、様々なパッケージが常に作られていて、それを手軽にインストールすることができるので便利です。 まともなエディタならみんなそうだと言われてしまうとその通りだと思いますが、私はやっぱり atom が一番慣れているのでw</description>
    </item>
    
    <item>
      <title>Java の抽象クラス・インターフェイスについて</title>
      <link>https://7coco.github.io/post/java_interface/</link>
      <pubDate>Mon, 10 Apr 2017 14:51:13 +0900</pubDate>
      
      <guid>https://7coco.github.io/post/java_interface/</guid>
      <description>本日のTIL 今日は 前回 予告した通り Java の抽象クラスとインターフェイスについてまとめます。
抽象クラス abstract という修飾子をつけることで 抽象クラス を作ることができます。
特徴  オブジェクトを作成することができない  new して作れないってこと。 抽象クラスの変数や配列は準備してサブクラスのオブジェクトをさすことはできる。  処理内容が定義されていないメソッド ( 抽象メソッド &amp;ndash; abstract method )を持っている。  abstract というキーワードをつけてメソッドを定義すると抽象メソッドに。  サブクラスを拡張することができる。  ただし、 抽象クラスから継承した抽象メソッドの内容をサブクラスで定義、オーバーライドしなければならない 。 サブクラスは必ずその抽象クラスのメソッドを持っているので、まとめて簡単に扱える。   インターフェイス 宣言 こんな感じ↓
interface iVehicle { void show(); // 抽象メソッド }  特徴  interface を使って宣言する。 フィールドとメソッドを持つことができる。 コンストラクタは持たない。 フィールドは必ず初期化する。 メソッドの処理は定義しない。 メンバには何も修飾子をつけない。  何もつけなくても、フィールドには public static final, メソッドには abstract がついているのと同じことに。 つまりフィールドは絶対定数で、メソッドは抽象メソッド。  オブジェクトを作成することはできません。  変数・配列を宣言することはできる。  クラスと組み合わせて使うことになっている。  クラスと組み合わせることを インターフェイスを実装する という。   使い方 インターフェイスの実装 class &amp;lt;クラス名&amp;gt; implements &amp;lt;インターフェイス名&amp;gt; { /* hogehoge fugafuga piyopiyo */ }  さて、このようなクラスを作ったら、インターフェイスのメソッドをすべて定義する という作業が必要になります。 インターフェイス型の配列は、そのインターフェイスを実装しているサブクラスのオブジェクトを指すことができます。インンターフェイスも、上で見た抽象kルアスと同じように サブクラスをまとめて扱うことができます 。</description>
    </item>
    
    <item>
      <title>Java のクラスについて</title>
      <link>https://7coco.github.io/post/java_class/</link>
      <pubDate>Tue, 04 Apr 2017 14:49:00 +0900</pubDate>
      
      <guid>https://7coco.github.io/post/java_class/</guid>
      <description>本日のTIL 今回は「やさしいJava」を読んで Java のクラスについて学んだ中で今まで意識できていなかった考え方や馴染みのなかった書き方、概念などについて書きます。
クラスの機能 カプセル化 カプセル化についてはもちろん Java を学び始める前もなるべく意識してコードを書いてきたので詳しくは書きませんが、全てのメソッドの先頭に public private とついているとわかりやすいなと思いました。 ( Ruby で private 以下が長くなって「結局これ private メソッドなの？」みたいになること、うーん、あるのか……？)
メソッドのオーバーロード Java では 同じクラスの中に、同じ名前を持つメソッドを複数定義すること ができ、これを メソッドのオーバーロード といいます。 ちなみに、コンストラクタもオーバーロードすることができます。
効果  似たような複数の処理を、1つのメソッド名を覚えて使うだけで自動的に型や個数に応じた処理が行われる。 似たような処理について同じメソッド名を利用することができる。 1つの名前が別々の働きを持つことを多様性というが、これが生まれる。  注意点  オーバーロードするメソッドは引数の型もしくは個数が異なってなければならない。  余談 Ruby にはないものですね ( そうですよね？ ) 。 これができるのはやはり静的型言語の強みなのかなと思います。 今まで JS や Ruby しか書いていなかったので、同じ名前のメソッドを同じクラス内に定義するというとびっくりしますが、考えてみればとても便利ですね。 Ruby だと、個数の違いに対応するために引数にデフォルト値を入れたり配列やハッシュを引数にしたり、引数の型で処理を分けるためにメソッドの中で調べたりすると思いますが、 Java だとその必要がなくて、一つのメソッドが無駄に長くならなくて嬉しいですね！
インスタンス変数・インスタンスメソッド  オブジェクトに関連づけられているフィールドをインスタンス変数 オブジェクトに関連づけられているメソッドをインスタンスメソッド  と言います。
インスタンス変数・インスタンスメソッドはオブジェクトが作成された時にアクセスできるものです。
クラス変数・クラスメソッド クラスに関連づけられているフィールドを クラス変数 、メソッドを クラスメソッド と言います。 これらはインスタンス変数とは異なり、クラス全体に関連づけられます。 クラス全体で扱うデータを格納しておくフィールド がクラス変数、 クラス変数を出力するなど、 クラス全体に関わる処理を行う のがクラスメソッドです。 クラスメソッドはオブジェクトが作成されていなくても呼び出せます。 代表的なクラスメソッドとして main() メソッドがあります。</description>
    </item>
    
    <item>
      <title>Java のコレクションのまとめ</title>
      <link>https://7coco.github.io/post/java_collection/</link>
      <pubDate>Sat, 01 Apr 2017 14:46:19 +0900</pubDate>
      
      <guid>https://7coco.github.io/post/java_collection/</guid>
      <description>本日のTIL 前提として。 Java 書いたことないんじゃあ！ Java どころか静的型言語をまともに書いたことがありませんでした。 今までやってきたのは JS ( 主にサーバーサイドNode.js ) と Ruby ( Rails ) でした。 しかもやってきたと言ってもたかだか一年間で、エンジニアとしてのバイトやインターンは複数の会社でやっていましたがまだまだひよっこです。 そんな私がマネーフォワードに入社するにあたり Java を書くことになって、インターン期間中は Java の勉強をしていました。
この記事を読むときは一応前提として上記のことを頭においていただければなと思います。
Java のコレクション Java には様々な種類のコレクションがあるのですが、そのうち私がこの一週間半で使ってみたコレクションについてまとめます。
配列 配列という言葉はお馴染みのものですが、Java の配列は私が知っている JS や Ruby の配列とは決定的に違うことが一つありました。 長さが変えられない ということです。
また、初期化の方法も少し馴染みのない感じでした。
// 例えばこんな感じとか int array[] = new int[5]; // こんな感じ int array[] = { 1, 2, 3, 4, 5 };  # 例えばこんな感じとか array = Array.new(5) # こんな感じ array = [1, 2, 3, 4, 5]  array[] という書き方や { } で囲うのは新鮮だなあと感じました ( だからと言ってどうというわけでもないのですがw )。</description>
    </item>
    
    <item>
      <title>EclipseでEmacsキーバインドが使えなくなった</title>
      <link>https://7coco.github.io/post/emacsoneclipse/</link>
      <pubDate>Fri, 31 Mar 2017 14:35:07 +0900</pubDate>
      
      <guid>https://7coco.github.io/post/emacsoneclipse/</guid>
      <description>本日のTIL ぶつかった問題 QuickRex というパッケージを Eclipse にインストールしてみたところ、 Eclipse で Emacs キーバインドが使えなくなってしまいました……。
慌ててパッケージをアンインストール、 Eclipse の再起動を行うも Emacs キーバインドは使えず。
宮坂さんに EclipseのClean起動 を教わって試してみるも効果なく。
こうなればやむを得まいと Eclipse の再インストール を行っても効果がなく。
Eclipse の keys 設定を見に行くと scheme は Emacs になっているし実際によく使うショートカットを検索するときちんと設定されている……。
正直、もうだめだ！と思いましたw
解決法 Eclipse の [環境設定] -&amp;gt; [General] -&amp;gt; [keys] で使いたい Emacs キーバインドを探し、 when を In windows に変更。
自分なりに解説 なぜだかわかりませんが ( タイミング的にインストールしたパッケージの影響と思われる ) ショートカットキーの多くの when が Editing Text になっていました。 Editing Text と言うといかにも正しい気がしますが、実はこれ「 全角入力の変換中 ( 変換の確定をする前で文字に下線が付いている時 ) 」のことなんです……。
つまりコードを書いている時のほとんどは Editing Textではないということですね……。なんじゃそりゃ。</description>
    </item>
    
    <item>
      <title>Java の正規表現でぶつかった</title>
      <link>https://7coco.github.io/post/java_regexp/</link>
      <pubDate>Thu, 30 Mar 2017 14:27:49 +0900</pubDate>
      
      <guid>https://7coco.github.io/post/java_regexp/</guid>
      <description>03/30のTIL では早速本日のTIL ぶつかったこと Java を書く中で正規表現で文字の &amp;ldquo;[&amp;rdquo; や &amp;ldquo;]&amp;rdquo; にマッチさせたいと思って、頭の中でこんな感じに思い浮かべました。
 Pattern.compile(&amp;quot;[[]]&amp;quot;);  いやいやこれじゃメタ文字の [] になっちゃうよと思い、実際にはこう書きました。
Pattern.compile(&amp;quot;[\[\]]&amp;quot;);  ただしこれは &amp;gt; Invalid escape sequence (valid ones are \b \t \n \f \r \&amp;rdquo; \&amp;rsquo; \ )
と言われます。 「ん？じゃあエスケープしなくていいの？」と思い、最初に頭に思い浮かべたものを書くと、今度はコンパイルできました。 ところが、実行してみるとこう言われます。
 Exception in thread &amp;ldquo;main&amp;rdquo; java.util.regex.PatternSyntaxException: Unclosed character class near index 3
 解決法 結論としてはこうすれば動きます。
Pattern.compile(&amp;quot;[\\[\\]]&amp;quot;);  自分なりに解説 [] のままでは文字ではなく正規表現のメタ文字として評価されてしまうというのは正しかったです。 ただ、ならば \ でエスケープして \[\] とすればいいかというとそれだけではダメです。 Java では文字列中で \ を表すには \ を用いてエスケープする必要があるからです。 結果として \\[\\] になります。 もちろん、[ ] に限らず、正規表現内でエスケープが必要な文字は全て、 正規表現のエスケープとしての \ と Java の文字列のエスケープとしての \ の二つが必要 です。</description>
    </item>
    
  </channel>
</rss>